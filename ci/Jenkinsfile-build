#!groovy

// populate variables from folder
withFolderProperties{
    REGISTRY_TRUST = "${env.REGISTRY_TRUST}"
    NVIDIA_REGISTRY_TRUST = "${env.NVIDIA_REGISTRY_TRUST}"
    REGISTRY_TRUST_CRED_ID = "${env.REGISTRY_TRUST_CRED_ID}"
    REGISTRY_DEV = "${env.REGISTRY_DEV}"
    NVIDIA_REGISTRY_DEV = "${env.NVIDIA_REGISTRY_DEV}"
    REGISTRY_DEV_CRED_ID = "${env.REGISTRY_DEV_CRED_ID}"
    OCP_NAMESPACE = "${env.OCP_NAMESPACE}"
}

if (BUILD_ENVIRONMENT == 'trust') {
    REGISTRY = REGISTRY_TRUST
    NVIDIA_REGISTRY = NVIDIA_REGISTRY_TRUST
    REGISTRY_CRED_ID = REGISTRY_TRUST_CRED_ID
}

if (BUILD_ENVIRONMENT == 'dev') {
    REGISTRY = REGISTRY_DEV
    NVIDIA_REGISTRY = NVIDIA_REGISTRY_DEV
    REGISTRY_CRED_ID = REGISTRY_DEV_CRED_ID
}

pipeline {
    agent {
        label "${BUILD_ENVIRONMENT}"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    environment {
        GIT_COMMIT_SHORT = sh(
            script: "printf \$(git rev-parse --short ${GIT_COMMIT})",
            returnStdout: true
        )
    }

    stages {
        stage("Set build name") {
            steps {
                // use name of the patchset as the build name
                wrap([$class: 'BuildUser']){
                    script {
                        if ("${params.BRANCH}" == 'null'){
                            buildName "$BUILD_NUMBER-$GIT_COMMIT_SHORT"
                            }
                        else {
                            buildName "$BUILD_NUMBER-$BUILD_ENVIRONMENT-${params.BRANCH}-$GIT_COMMIT_SHORT"
                            }
                            }
                //buildName "$BUILD_NUMBER-$GIT_COMMIT_SHORT"
                    buildDescription "Executed @ ${NODE_NAME}. Build started by ${BUILD_USER}"
                }
            }
        }

        stage("Git submodule recursive clone") {
            steps {
                echo "=====clone submodules====="
                sshagent(['d35cc8ea-04ce-4c30-97e3-e201ee123634']) {
                    sh "git submodule update --init --recursive --remote"
                    sh "git submodule update --recursive"
                    
                    // check and debug
                    sh "git log -n 1"
                    dir('src/seismiqb/'){
                        sh "git log -n 1"
                    }
                    dir('src/seismiqb/seismiqb/batchflow/'){
                        sh "git log -n 1"
                    }
                    
                }
            }
        }

        stage("Docker nvidia registry login") {
            steps {
                echo "=====docker login nvidia registry====="
                withCredentials([usernamePassword(credentialsId: "$REGISTRY_CRED_ID", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login $NVIDIA_REGISTRY -u $USERNAME -p $PASSWORD
                    """
                }
            }
        }

        stage("Docker build image") {
            steps {
                echo "=====docker build====="
                sh """
                docker build --no-cache -t $REGISTRY/$OCP_NAMESPACE/$OCP_APP_NAME:$GIT_COMMIT_SHORT -f $DOCKERFILE_NAME .
                """
            }
        }

        stage("Docker registry login") {
            steps {
                echo "=====docker login registry====="
                withCredentials([usernamePassword(credentialsId: "$REGISTRY_CRED_ID", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login $REGISTRY -u $USERNAME -p $PASSWORD
                    """
                }
            }
        }

        stage("Docker push image") {
            steps {
                echo "=====docker login and push====="
                sh """
                docker push $REGISTRY/$OCP_NAMESPACE/$OCP_APP_NAME:$GIT_COMMIT_SHORT
                """
            }
        }
    }
}
